{"version":3,"sources":["api-connect.js","actions.js","App.js","store.js","index.js"],"names":["fetchContent","options","requestOptions","Object","assign","baseURL","method","headers","dispatch","type","axios","request","then","res","content","success","data","catch","err","error","url","id","App","props","state","addNewPost","bind","handleAddNewPost","handleChange","nextProps","result","isFetching","this","APIConnect","setState","showInput","name","text","post","upvotes","parseInt","e","target","value","className","alert","JSON","stringify","map","d","i","key","dateformat","Date","createdOn","bsStyle","onClick","upvotePost","style","onChange","rows","Component","connect","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"uTAGMA,EAAe,SAACC,GAClB,IAAMC,EAAiBC,OAAOC,OAAO,GAAI,CACrCC,QAAS,oDACTC,OAAQ,MACRC,QAAS,CACL,OAAU,mBACV,eAAgB,qBAErBN,GAEH,OAAO,SAAAO,GAEH,OADAA,ECTJ,CACIC,KANa,QAObH,ODOeJ,EAAeI,SACvBI,IAAMC,QAAQT,GAChBU,MAAK,SAAAC,GACF,OAAOL,ECEA,SAACF,EAAQQ,GAAT,MACnB,CACIL,KAnBe,UAoBfH,SACAQ,WDNwBC,CAAQb,EAAeI,OAAQO,EAAIG,UAEtDC,OAAM,SAAAC,GACH,OAAOV,ECTF,SAACF,EAAQa,GAAT,MACjB,CACIV,KAZa,QAabH,SACAa,SDKwBA,CAAMjB,EAAeI,OAAQY,SA4B9C,EAvBH,WACR,OAAOlB,EAAa,CAChBM,OAAQ,MACRc,IAAK,YAoBE,EAhBF,SAACJ,GACV,OAAOhB,EAAa,CAChBM,OAAQ,OACRc,IAAK,SACLJ,UAYO,EARA,SAACK,EAAIL,GAChB,OAAOhB,EAAa,CAChBM,OAAQ,MACRc,IAAI,iBAAD,OAAmBC,GACtBL,U,0BEpCFM,E,YAEJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXR,KAAM,IAGR,EAAKS,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBATH,E,uFAYOG,GAAY,IAAD,EACsCA,EAAjEC,OAAUhB,GADiB,aAC+B,GAD/B,GACjBA,QAASK,EADQ,EACRA,MAAOY,EADC,EACDA,WAAYzB,EADX,EACWA,OADX,EACmBS,UAEtCgB,EACC,QAAXzB,EACF0B,KAAKT,MAAMf,SAASyB,KAGpBD,KAAKE,SAAS,CAAElB,KAAMF,EAASqB,WAAW,IAGrChB,GACPa,KAAKE,SAAS,CAAElB,KAAM,GAAImB,WAAW,M,0CAKvCH,KAAKT,MAAMf,SAASyB,O,yCAIpBD,KAAKE,SAAS,CAAEC,WAAW,M,mCAI3BH,KAAKT,MAAMf,SAASyB,EAAgB,CAAEG,KAAM,aAAcC,KAAML,KAAKR,MAAMa,U,iCAGlEC,GACTN,KAAKT,MAAMf,SAASyB,EAAkBK,EAAKjB,GAAI,CAAEkB,QAASC,SAASF,EAAKC,SAAW,O,mCAGxEE,GACXT,KAAKE,SAAS,CAAEG,KAAMI,EAAEC,OAAOC,U,+BAGvB,IAAD,SACqBX,KAAKR,MAAzBR,EADD,EACCA,KAAMmB,EADP,EACOA,UADP,EAEgCH,KAAKT,MAAMO,OAA1CX,EAFD,EAECA,MAAOY,EAFR,EAEQA,WAAYhB,EAFpB,EAEoBA,QAE3B,OACE,yBAAK6B,UAAU,cACXb,IAAehB,IACf,yBAAKM,GAAG,WACN,uBAAGuB,UAAU,4CACXb,IAAehB,GAAW8B,MAAM,UAAYC,KAAKC,UAAU5B,KAGjE,uCACA,2BAAOyB,UAAU,uBACf,+BACE,4BACE,oCACA,oCACA,yCACA,+BAGJ,+BACG5B,EAAKgC,KAAI,SAACC,EAAGC,GACZ,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAEb,MACP,4BAAKa,EAAEZ,MACP,4BAAKe,IAAW,IAAIC,KAAKJ,EAAEK,WAAY,2BACvC,sCACML,EAAEV,QADR,YACmBU,EAAEV,QAAU,EAAI,UAAY,UAC7C,kBAAC,IAAD,CAAQgB,QAAQ,OAAOC,QAAS,EAAKC,WAAW/B,KAAK,EAAMuB,IACzD,uBAAGL,UAAU,mBAAb,cASXT,EAEC,yBAAKuB,MAAO,CAAE,QAAW,SACvB,8BAAUd,UAAU,eAAee,SAAU3B,KAAKJ,aAAcgC,KAAK,MACrE,kBAAC,IAAD,CAAQL,QAAQ,UAAUG,MAAO,CAAE,OAAU,QAAUF,QAASxB,KAAKP,YAArE,QAHF,kBAAC,IAAD,CAAQ8B,QAAQ,UAAUC,QAASxB,KAAKL,kBAAxC,qB,GA5FMkC,aA8GHC,eAPS,SAACtC,GAGvB,MAAO,CAAEM,OAFUN,EAAXM,UAMKgC,CAAyBxC,G,0BClHlCyC,EAAe,CACjBjC,OAAQ,CACJhB,QAAS,KACTK,MAAO,KACPY,YAAY,EACZzB,OAAQ,KACRS,SAAS,IAiDFiD,EALDC,aAxCE,WAAmC,IAAlCzC,EAAiC,uDAAzBuC,EAAcG,EAAW,uCAC9C,OAAQA,EAAOzD,MACX,IFhBa,QEiBT,MAAO,CACHqB,OAAQ,CACJhB,QAAS,KACTK,MAAO,KACPY,YAAY,EACZzB,OAAQ4D,EAAO5D,OACfS,SAAS,IAIrB,IFzBe,UE0BX,MAAO,CACHe,OAAQ,CACJhB,QAASoD,EAAOpD,QAChBK,MAAO,KACPY,YAAY,EACZzB,OAAQ4D,EAAO5D,OACfS,SAAS,IAIrB,IFrCa,QEsCT,MAAO,CACHe,OAAQ,CACJhB,QAAS,KACTK,MAAO+C,EAAO/C,MACdY,YAAY,EACZzB,OAAQ4D,EAAO5D,OACfS,SAAS,IAIrB,QACI,OAAOS,KAMf2C,YAAgBC,MChDpBC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,eAAe,W","file":"static/js/main.1c1a7c17.chunk.js","sourcesContent":["import axios from 'axios';\nimport { begin, error, success } from './actions';\n\nconst fetchContent = (options) => {\n    const requestOptions = Object.assign({}, {\n        baseURL: 'https://post-service-fe827.firebaseapp.com/api/v1',\n        method: 'get',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n    }, options);\n\n    return dispatch => {\n        dispatch(begin(requestOptions.method));\n        return axios.request(requestOptions)\n            .then(res => {\n                return dispatch(success(requestOptions.method, res.data));\n            })\n            .catch(err => {\n                return dispatch(error(requestOptions.method, err));\n            });\n    };\n}\n\nconst get = () => {\n    return fetchContent({\n        method: 'get',\n        url: '/feeds'\n    });\n};\n\nconst post = (data) => {\n    return fetchContent({\n        method: 'post',\n        url: '/feeds',\n        data\n    });\n};\n\nconst upvote = (id, data) => {\n    return fetchContent({\n        method: 'put',\n        url: `/feeds/upvote/${id}`,\n        data\n    });\n};\n\nexport default {\n    get,\n    post,\n    upvote\n}\n","export const BEGIN = \"BEGIN\";\nexport const ERROR = \"ERROR\";\nexport const SUCCESS = \"SUCCESS\";\n\nexport const begin = (method) => (\n    {\n        type: BEGIN,\n        method\n    }\n);\n\nexport const error = (method, error) => (\n    {\n        type: ERROR,\n        method,\n        error\n    }\n);\n\nexport const success = (method, content) => (\n    {\n        type: SUCCESS,\n        method,\n        content\n    }\n);\n","import React, { Component } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport APIConnect from './api-connect';\nimport { Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport dateformat from 'dateformat';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    }\n\n    this.addNewPost = this.addNewPost.bind(this);\n    this.handleAddNewPost = this.handleAddNewPost.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { result: { content, error, isFetching, method, success } = {} } = nextProps;\n\n    if (success && !isFetching) {\n      if (method !== 'get') {\n        this.props.dispatch(APIConnect.get());\n      }\n      else {\n        this.setState({ data: content, showInput: false });\n      }\n    }\n    else if (error) {\n      this.setState({ data: [], showInput: false });\n    }\n  }\n\n  componentDidMount() {\n    this.props.dispatch(APIConnect.get());\n  }\n\n  handleAddNewPost() {\n    this.setState({ showInput: true });\n  }\n\n  addNewPost() {\n    this.props.dispatch(APIConnect.post({ name: 'Amit kumar', text: this.state.text }));\n  }\n\n  upvotePost(post) {\n    this.props.dispatch(APIConnect.upvote(post.id, { upvotes: parseInt(post.upvotes) + 1 }));\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  render() {\n    const { data, showInput } = this.state\n    const { error, isFetching, success } = this.props.result\n\n    return (\n      <div className=\"container\">\n        {(isFetching || !success) &&\n          <div id=\"overlay\">\n            <i className=\"fa fa-spinner fa-spin fa-5x pageCenter\"></i>\n            {!isFetching && !success && alert(\"Error: \" + JSON.stringify(error))}\n          </div>\n        }\n        <h2>POSTS: </h2>\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Post</th>\n              <th>CreatedOn</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((d, i) => {\n              return (\n                <tr key={i}>\n                  <td>{d.name}</td>\n                  <td>{d.text}</td>\n                  <td>{dateformat(new Date(d.createdOn), 'mmm dd, yyyy, hh:MM tt')}</td>\n                  <td>\n                    {`${d.upvotes} ${d.upvotes > 1 ? 'upvotes' : 'upvote'}`}\n                    <Button bsStyle='link' onClick={this.upvotePost.bind(this, d)}>\n                      <i className=\"fa fa-thumbs-up\">+1</i>\n                    </Button>\n                  </td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n        {\n          !showInput ?\n            <Button bsStyle='primary' onClick={this.handleAddNewPost}>Add New Post</Button> :\n            <div style={{ \"display\": \"flex\" }}>\n              <textarea className=\"form-control\" onChange={this.handleChange} rows=\"3\"></textarea>\n              <Button bsStyle='primary' style={{ \"margin\": \"20px\" }} onClick={this.addNewPost}>Add</Button>\n            </div>\n        }\n      </div >\n    )\n  }\n};\n\nconst mapStateToProps = (state) => {\n  const { result } = state\n\n  return { result };\n};\n\n\nexport default connect(mapStateToProps)(App);\n","import { BEGIN, ERROR, SUCCESS } from './actions';\nimport thunk from 'redux-thunk';\nimport { applyMiddleware, createStore } from 'redux';\n\nconst initialState = {\n    result: {\n        content: null,\n        error: null,\n        isFetching: false,\n        method: null,\n        success: true\n    }\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case BEGIN:\n            return {\n                result: {\n                    content: null,\n                    error: null,\n                    isFetching: true,\n                    method: action.method,\n                    success: false\n                }\n            };\n\n        case SUCCESS:\n            return {\n                result: {\n                    content: action.content,\n                    error: null,\n                    isFetching: false,\n                    method: action.method,\n                    success: true\n                }\n            };\n\n        case ERROR:\n            return {\n                result: {\n                    content: null,\n                    error: action.error,\n                    isFetching: false,\n                    method: action.method,\n                    success: false\n                }\n            };\n\n        default:\n            return state;\n    }\n};\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(thunk)\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\n\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}