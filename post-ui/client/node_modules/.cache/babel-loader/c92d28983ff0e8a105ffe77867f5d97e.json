{"ast":null,"code":"var _jsxFileName = \"/home/amit/feed-node/client/src/App.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'react-bootstrap';\nimport APIConnect from './api-connect';\nimport dateformat from 'dateformat';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n    this.handleAddNewPost = this.handleAddNewPost.bind(this);\n    this.addNewPost = this.addNewPost.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const _nextProps$result = nextProps.result,\n          _nextProps$result2 = _nextProps$result === void 0 ? {} : _nextProps$result,\n          success = _nextProps$result2.success,\n          isFetching = _nextProps$result2.isFetching,\n          content = _nextProps$result2.content,\n          method = _nextProps$result2.method;\n\n    if (success && !isFetching) {\n      if (method !== 'get') {\n        APIConnect.get();\n      } else {\n        this.setState({\n          data: content,\n          showInput: false\n        });\n      }\n    }\n  }\n\n  componentDidMount() {\n    APIConnect.get();\n  }\n\n  handleAddNewPost() {\n    this.setState({\n      showInput: true\n    });\n  }\n\n  addNewPost() {\n    APIConnect.post({\n      name: 'Amit kumar',\n      text: this.state.text\n    });\n  }\n\n  upvotePost(post) {\n    APIConnect.upvote(post.id, {\n      upvotes: parseInt(post.upvotes) + 1\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      text: e.target.value\n    });\n  }\n\n  render() {\n    // if (this.props.result.isFetching) {\n    //   return 'Loading'\n    // }\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"POSTS:\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.state.data.map((d, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, d.name), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, d.text), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, dateformat(d.createdOn, 'mmm dd, yyyy, hh:MM tt')), React.createElement(Button, {\n        bsStyle: \"link\",\n        onClick: this.upvotePost.bind(this, d),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"\".concat(d.upvotes, \" Upvotes\")));\n    })), !this.state.showInput ? React.createElement(Button, {\n      bsStyle: \"link\",\n      onClick: this.handleAddNewPost,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Add\") : [React.createElement(\"input\", {\n      key: 0,\n      onChange: this.handleChange,\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Button, {\n      bsStyle: \"link\",\n      key: 1,\n      onClick: this.addNewPost,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Add Post\")]);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    result: state.response\n  };\n};\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["/home/amit/feed-node/client/src/App.js"],"names":["React","Component","Button","APIConnect","dateformat","connect","App","constructor","props","state","data","handleAddNewPost","bind","addNewPost","handleChange","componentWillReceiveProps","nextProps","result","success","isFetching","content","method","get","setState","showInput","componentDidMount","post","name","text","upvotePost","upvote","id","upvotes","parseInt","e","target","value","render","map","d","i","createdOn","mapStateToProps","response"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Button } from 'react-bootstrap'\nimport APIConnect from './api-connect'\nimport dateformat from 'dateformat'\nimport { connect } from 'react-redux'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      data: []\n    }\n\n    this.handleAddNewPost = this.handleAddNewPost.bind(this)\n    this.addNewPost = this.addNewPost.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { result: { success, isFetching, content, method } = {} } = nextProps\n\n    if (success && !isFetching) {\n      if (method !== 'get') {\n        APIConnect.get()\n      }\n      else {\n        this.setState({ data: content, showInput: false })\n      }\n    }\n  }\n\n  componentDidMount() {\n    APIConnect.get()\n  }\n\n  handleAddNewPost() {\n    this.setState({ showInput: true })\n  }\n\n  addNewPost() {\n    APIConnect.post({ name: 'Amit kumar', text: this.state.text })\n  }\n\n  upvotePost(post) {\n    APIConnect.upvote(post.id, { upvotes: parseInt(post.upvotes) + 1 })\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value })\n  }\n\n  render() {\n    // if (this.props.result.isFetching) {\n    //   return 'Loading'\n    // }\n\n    return (\n      <div>\n        <div>POSTS:</div>\n        <div>\n          {this.state.data.map((d, i) => {\n            return (\n              <div key={i}>\n                <span>{d.name}</span>\n                <span>{d.text}</span>\n                <span>\n                  {dateformat(d.createdOn, 'mmm dd, yyyy, hh:MM tt')}\n                </span>\n                <Button bsStyle='link' onClick={this.upvotePost.bind(this, d)}>\n                  {`${d.upvotes} Upvotes`}\n                </Button>\n              </div>\n            )\n          })}\n        </div>\n        {!this.state.showInput ?\n          (<Button bsStyle='link' onClick={this.handleAddNewPost}>Add</Button>) :\n          [<input key={0} onChange={this.handleChange} type='text'></input>,\n          <Button bsStyle='link' key={1} onClick={this.addNewPost}>Add Post</Button>]\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    result: state.response\n  };\n}\n\n\nexport default connect(mapStateToProps)(App);\n"]},"metadata":{},"sourceType":"module"}