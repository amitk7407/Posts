{"ast":null,"code":"import { REQUEST, RECEIVE } from './actions';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nconst initialState = {\n  success: true,\n  isFetching: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST:\n      return {\n        result: {\n          success: false,\n          isFetching: true,\n          method: action.method\n        }\n      };\n\n    case RECEIVE:\n      return {\n        result: {\n          success: true,\n          isFetching: false,\n          content: action.content,\n          method: action.method\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, applyMiddleware(thunk));\nexport default store;","map":{"version":3,"sources":["/home/amit/feed-node/client/src/store.js"],"names":["REQUEST","RECEIVE","thunk","createStore","applyMiddleware","initialState","success","isFetching","reducer","state","action","type","result","method","content","store"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,WAAjC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,UAAU,EAAE;AAFK,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,OAAL;AACI,aAAO;AACHY,QAAAA,MAAM,EAAE;AACJN,UAAAA,OAAO,EAAE,KADL;AAEJC,UAAAA,UAAU,EAAE,IAFR;AAGJM,UAAAA,MAAM,EAAEH,MAAM,CAACG;AAHX;AADL,OAAP;;AAOJ,SAAKZ,OAAL;AACI,aAAO;AACHW,QAAAA,MAAM,EAAE;AACJN,UAAAA,OAAO,EAAE,IADL;AAEJC,UAAAA,UAAU,EAAE,KAFR;AAGJO,UAAAA,OAAO,EAAEJ,MAAM,CAACI,OAHZ;AAIJD,UAAAA,MAAM,EAAEH,MAAM,CAACG;AAJX;AADL,OAAP;;AAQJ;AACI,aAAOJ,KAAP;AAnBR;AAqBH,CAtBD;;AAwBA,MAAMM,KAAK,GAAGZ,WAAW,CACrBK,OADqB,EAErBJ,eAAe,CAACF,KAAD,CAFM,CAAzB;AAKA,eAAea,KAAf","sourcesContent":["import { REQUEST, RECEIVE } from './actions'\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst initialState = {\n    success: true,\n    isFetching: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case REQUEST:\n            return {\n                result: {\n                    success: false,\n                    isFetching: true,\n                    method: action.method\n                }\n            };\n        case RECEIVE:\n            return {\n                result: {\n                    success: true,\n                    isFetching: false,\n                    content: action.content,\n                    method: action.method\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(thunk)\n);\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}